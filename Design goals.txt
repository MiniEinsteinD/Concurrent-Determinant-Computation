
Description of the important goals of my design:

    The first decision I made in terms of creating this application is implementing a simple function called largest to find the largest integer among three different integers. 
    This decision prevented me from repeatedly copying and pasting my code in order to find the largest integer for the 3 children processes. 
    Instead, I created a simple function that takes care of finding the largest integer among the integers presented. 
 

    I used an integer [i] that keeps track of every child's process that is being executed. 
    I used a while loop to fork 3 children from the parent process.  
    The main goal of this design decision is to use a more efficient way to fork the children's processes instead of using many switch statements 
    which makes the code more complicated and less readable.  
    My code breaks out of the while loop when a child process is detected and enters a switch statement to execute the proper code for each process.


    I came up with efficient formulas to find D[i-1] (the determinant of each element in row [0]) and L[i-1] (the largest integer in each row) for each P(i);
    [i] represnt the number of the process that is being executed. 
    I came up with these formulas by observing a pattern in the 3 codes for each P(i) I wrote in my earlier designs
    The reason for using [i-1] instead of [i] is because I decided to start both array [D] and array [L] from index 0 while my child processes start from [1].
    These formulas makes the code easier to read and understand which is better than writing a sperate code for each process. 
        shared_stuff -> D[i-1]= (shared_stuff -> M[0][i-1]) *(shared_stuff -> M[1][i%3] * shared_stuff -> M[2][(i+1)%3] - shared_stuff -> M[1][(i+1)%3] * shared_stuff -> M[2][i%3]);
        shared_stuff -> L[i-1]= largest(shared_stuff->M[i-1][0],shared_stuff->M[i-1][1],shared_stuff->M[i-1][2]);

    Finally, I decided to include 3 wait statements in the parent process inside the switch statement so the parent waits until all the children are done altering the variables in the shared memory. 
    The parent starts using the variables from the shared memory that the children finished altering and comes up with the final results for the determinant and the largest value of the 3x3 matrix [M]. 

    The overall design goals are to keep the code easy, concise, understandable, and more efficient. 
    I went through multiple iterations to develop this final design and I hope it meets all the requirements to achieve an efficient and functional project.

